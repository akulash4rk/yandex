import Foundation
var counter : Int = 1
var inputData : [String] =  []
var arr : [[String]] = []
var finish : [Int] = []
let fileURL = URL(fileURLWithPath: FileManager.default.currentDirectoryPath).appendingPathComponent("input.txt")
do {
    let data = try String(contentsOf: fileURL, encoding: .utf8)
    inputData = data.components(separatedBy: "\n")
    inputData.remove(at: 0)
    if inputData.last == "" {
        inputData.remove(at: inputData.endIndex-1)
    }
    let start = [inputData[0].split(separator: " ").compactMap{Int($0)!}[0], inputData[0].split(separator: " ").compactMap{Int($0)!}[1]]
    finish = [inputData[0].split(separator: " ").compactMap{Int($0)!}[2], inputData[0].split(separator: " ").compactMap{Int($0)!}[3]]
    
    for i in 1..<inputData.count {
        let intLine = inputData[i].split(separator: " ").compactMap{String($0)}
        arr.append([])
        arr[i-1] = intLine
    }

    var queue : [[Int]] = []
    inputData = []
    move(startY: start[0], startX: start[1])
    
    
    func move(startY : Int, startX : Int) {
        
        if queue != []{
            queue.remove(at: 0)
        }
        
        if startY == finish[0] && startX == finish[1] {
            return
        }
        
        if startY+1 == arr.count {
            if  startY != 0 {
                if arr[0][startX] == "0" {
                    arr[0][startX] = arr[startY][startX]+"S"
                    queue.append([0, startX])
                }
            }
        } else {
            
            if arr[startY+1][startX] == "0" {
                arr[startY+1][startX] = arr[startY][startX]+"S"
                queue.append([startY+1, startX])
            }
        }
        
        if startY-1 < 0 {
            if arr[arr.count-1][startX] == "0" {
                if arr.count-1 != startY{
                    arr[arr.count-1][startX] = arr[startY][startX]+"N"
                    queue.append([arr.count-1, startX])
                }
            }
        } else {
            if arr[startY-1][startX] == "0" {
                arr[startY-1][startX] = arr[startY][startX]+"N"
                queue.append([startY-1, startX])
            }
        }
        
        if startX+1 == arr[0].count {
            if arr[startY][0] == "0" {
                if startX != 0 {
                    arr[startY][0] = arr[startY][startX]+"E"
                    queue.append([startY, 0])
                }
            }
        } else {
            if arr[startY][startX+1] == "0" {
                arr[startY][startX+1] = arr[startY][startX]+"E"
                queue.append([startY, startX+1])
            }
        }
        
        if startX-1 < 0 {
            if arr[startY][arr[0].count-1] == "0" {
                if startX != arr[0].count-1 {
                    arr[startY][arr[0].count-1] = arr[startY][startX]+"W"
                    queue.append([startY, arr[0].count-1])
                }
            }
        } else {
            if arr[startY][startX-1] == "0" {
                if arr[startY][startX-1].count < (arr[startY][startX]+"W").count {
                    arr[startY][startX-1] = arr[startY][startX]+"W"
                }
                
                queue.append([startY, startX-1])
            }
        }
        if queue != [] {
            arr[startY][startX] = "z"
            move(startY: queue[0][0], startX: queue[0][1])
        }
    }
}


if arr[finish[0]][finish[1]] == "0" {
    print(-1)
} else {
    print(arr[finish[0]][finish[1]].filter {$0.isLetter})
}
